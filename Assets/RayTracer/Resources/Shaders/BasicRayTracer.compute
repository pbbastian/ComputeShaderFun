// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Trace

#include "Math.cginc"

struct TriangleData
{
	Triangle tri;
	float3 normal;
};

float3 _light;
float2 _screenSize;
float4x4 _inverseCameraMatrix;
float3 _origin;
RWTexture2D<float4> _result;
StructuredBuffer<TriangleData> _triangles;

static const float PI = 3.14159265f;
static const float TMAX = 3.402823466e+38F;

[numthreads(8, 8, 1)]
void Trace(uint3 id : SV_DispatchThreadID)
{
	Ray r = CameraRay(_inverseCameraMatrix, _origin, _screenSize, id.xy);

	uint triangleCount, stride;
	_triangles.GetDimensions(triangleCount, stride);

	float t = TMAX;
    float3 coordinates;
	TriangleData tri;
	for (uint i = 0; i < triangleCount; i++)
	{
        float3 newCoordinates;
        float new_t = IntersectTriangle(_triangles[i].tri, r, newCoordinates);
        if (new_t > EPSILON && new_t < t)
		{
			t = new_t;
			tri = _triangles[i];
            coordinates = newCoordinates;
        }
	}

	float3 color;

    if (t - TMAX < 0)
        color = (max(0.0, dot(tri.normal, -_light)) + 0.15) * lerp(coordinates, 1.0, 0.25);
    else
		color = 0;

	_result[id.xy] = float4(color, 1);
}
