#pragma kernel BvhShadows
#pragma kernel PersistentBvhShadows PERSISTENT

#include "UnityCG.cginc"
#include "Math.cginc"
#include "Bvh.cginc"

Texture2D<float4> _MainTex;
Texture2D<float4> _NormalTexture;
UNITY_DECLARE_TEX2D_FLOAT(_DepthTexture);
RWTexture2D<float4> _TargetTex;
StructuredBuffer<Bvh::Node> _Nodes;
StructuredBuffer<IndexedTriangle> _Triangles;
StructuredBuffer<float4> _Vertices;
float3 _Light;
float2 _Size;
float4x4 _Projection;
float4x4 _InverseView;
RWStructuredBuffer<int> _JobCounter;

#define STACK_SIZE 64

static const int _entrypointSentinel = 2147483647;

int EncodeLeaf(int nodeIndex, bool isLeaf)
{
	if (isLeaf)
		nodeIndex = -(nodeIndex + 1);
	return nodeIndex;
}

int DecodeLeaf(int nodeIndex)
{
	return (-nodeIndex) - 1;
}

void Kernel(uint2 id)
{
	if ((float) id.x >= _Size.x || (float) id.y >= _Size.y)
		return;

	if (id.x == 0 && id.y == 0)
		_JobCounter[0] = 64*64;

	float zbufDpth = _DepthTexture[id.xy].x;
	float vz = LinearEyeDepth(zbufDpth);
	float2 p11_22 = float2(_Projection._11, _Projection._22);
	float2 uv = ((float2)id.xy / _Size);
    float3 vpos = float3((uv * 2 - 1) / p11_22, -1) * vz;
    float4 wpos = mul(_InverseView, float4(vpos, 1));
    float3 normal = normalize(_NormalTexture[id.xy] * 2 - 1);
	
    float3 direction = normalize(-_Light);
    Ray r = MakeRay(wpos + normal*1e-2, direction);

	int traversalStack[STACK_SIZE];
	traversalStack[0] = _entrypointSentinel;
	int nodeIndex = 0;
	int stackIndex = 0;

	// float3 idir = 1.0 / r.direction;
	float t = 100000;

	int boxIntersections = 0;
	int triangleIntersections = 0;
	int pushes = 0;
	int pops = 0;

	// Commented out for now, but to be re-introduced
	// if (dot(direction, normal) <= 1e-3)
	// {
	// 	nodeIndex = _entrypointSentinel;
	// 	t = 1;
	// }

	while (nodeIndex != _entrypointSentinel)
	{
		while (nodeIndex >= 0 && nodeIndex != _entrypointSentinel)
		{
			Bvh::Node node = _Nodes[nodeIndex];
			FloatMinMax tLeft = IntersectAabb(node.leftBounds, r);
			FloatMinMax tRight = IntersectAabb(node.rightBounds, r);
			bool traverseLeft = tLeft.min <= tLeft.max    && tLeft.min  < t;
			bool traverseRight = tRight.min <= tRight.max && tRight.min  < t;

			int encodedLeft = EncodeLeaf(node.left, node.isLeftLeaf);
			int encodedRight = EncodeLeaf(node.right, node.isRightLeaf);
			nodeIndex = encodedLeft;

			if (traverseLeft != traverseRight)
			{
				boxIntersections++;
				// If only a single child was intersected we simply go to that one
				if (traverseRight)
					nodeIndex = encodedRight;
			}
			else
			{
				if (!traverseLeft)
				{
					// If neither child was intersected we pop the stack
					nodeIndex = traversalStack[stackIndex];
					stackIndex--;
					pops++;
				}
				else
				{
					boxIntersections += 2;
					// If both children were intersected we push one onto the stack
					nodeIndex = encodedLeft;
					int postponeIndex = encodedRight;
					if (tRight.min < tLeft.min)
					{
						nodeIndex = encodedRight;
						postponeIndex = encodedLeft;
					}

					stackIndex++;
					traversalStack[stackIndex] = postponeIndex;
					pushes++;
				}
			}
		}

		if (nodeIndex < 0)
		{
			nodeIndex = DecodeLeaf(nodeIndex);
			IndexedTriangle indices = _Triangles[nodeIndex];
			Triangle tri = MakeTriangle(_Vertices[indices.v1].xyz, _Vertices[indices.v2].xyz, _Vertices[indices.v3].xyz);

			// intersect triangle
			float3 candidateCoordinates;
			float candidate_t = IntersectTriangle(tri, r, candidateCoordinates); 
			triangleIntersections++;
			if (candidate_t > 0 && candidate_t < t)
			{
				t = candidate_t;
				nodeIndex = _entrypointSentinel;
			}
			else
			{
				nodeIndex = traversalStack[stackIndex];
				stackIndex--;
			}
		}

		if (nodeIndex == _entrypointSentinel)
		{
			fixed4 col = _MainTex[id];
			if (t < 99999)
				col *= 0.5;
			else
				col *= 1.0;
			_TargetTex[id] = col;

			#ifdef PERSISTENT

			int newIndex;
			InterlockedAdd(_JobCounter[0], 1, newIndex);
			if (newIndex >= (int) (_Size.x * _Size.y))
				return;
			id.x = newIndex % _Size.y;
			id.y = newIndex / _Size.x;

			nodeIndex = 0;
			stackIndex = 0;
			t = 100000;

			#endif
		}
	}
}


[numthreads(8, 8, 1)]
void BvhShadows(uint3 id : SV_DispatchThreadID)
{
	Kernel(id);
}

[numthreads(8, 8, 1)]
void PersistentBvhShadows(uint3 id : SV_DispatchThreadID)
{
	Kernel(id);
}