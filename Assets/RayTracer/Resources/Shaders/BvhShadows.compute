#pragma kernel BvhShadows
#pragma kernel PersistentBvhShadows PERSISTENT

#define STATS

#include "UnityCG.cginc"
#include "Math.cginc"
#include "Bvh.cginc"

Texture2D<float4> _MainTex;
Texture2D<float4> _NormalTexture;
UNITY_DECLARE_TEX2D_FLOAT(_DepthTexture);
RWTexture2D<float4> _TargetTex;
StructuredBuffer<Bvh::Node> _Nodes;
StructuredBuffer<IndexedTriangle> _Triangles;
StructuredBuffer<float4> _Vertices;
float3 _Light;
float2 _Size;
float4x4 _Projection;
float4x4 _InverseView;
uint _ThreadGroupCount;
RWStructuredBuffer<uint> _WorkCounter;

#define STACK_SIZE 32

static const int _entrypointSentinel = 2147483647;
static const int _rayBatchSize = 64;

int EncodeLeaf(int nodeIndex, bool isLeaf)
{
	if (isLeaf)
		nodeIndex = -(nodeIndex + 1);
	return nodeIndex;
}

int DecodeLeaf(int nodeIndex)
{
	return (-nodeIndex) - 1;
}

interface IStatistics
{
	void BoxIntersection(int n);
	void TriangleIntersection(int n);
	void Push(int n);
	void Pop(int n);
};

class Statistics : IStatistics
{
	int boxIntersections;
	int triangleIntersections;
	int pushes;
	int pops;

	void BoxIntersection(int n) { boxIntersections += n; }
	void TriangleIntersection(int n) { triangleIntersections += n; }
	void Push(int n) { pushes += n; }
	void Pop(int n) { pops += n; }
};

Statistics MakeStatistics()
{
	Statistics stats;
	stats.boxIntersections = 0;
	stats.triangleIntersections = 0;
	stats.pushes = 0;
	stats.pops = 0;
	return stats;
}

class FakeStatistics : IStatistics
{
	void BoxIntersection(int n) {}
	void TriangleIntersection(int n) {}
	void Push(int n) {}
	void Pop(int n) {}
};

struct TraversalStats
{
	int boxIntersections;
	int triangleIntersections;
	int pushes;
	int pops;
};

struct TraversalState
{
	Ray ray;
	int nodeIndex;
	int stackIndex;
	float t;
};

TraversalState InitializeState(uint2 id)
{
	TraversalState state;

	float depth = LinearEyeDepth(_DepthTexture[id.xy].x);
	float2 p11_22 = float2(_Projection._11, _Projection._22);
	float2 uv = ((float2)id.xy / _Size);
    float3 vpos = float3((uv * 2 - 1) / p11_22, -1) * depth;
    float4 wpos = mul(_InverseView, float4(vpos, 1));
    float3 direction = normalize(-_Light);
    float3 normal = normalize(_NormalTexture[id.xy] * 2 - 1);

    state.ray = MakeRay(wpos + normal*1e-2, direction);
    // state.normal = normal;
    state.nodeIndex = 0;
    state.stackIndex = 0;
    state.t = 100000;

    return state;
}

static int traversalStack[STACK_SIZE];

void Traverse(inout TraversalState s, inout FakeStatistics stats)
{
	while (s.nodeIndex != _entrypointSentinel)
	{
		while (s.nodeIndex >= 0 && s.nodeIndex != _entrypointSentinel)
		{
			Bvh::Node node = _Nodes[s.nodeIndex];

			FloatMinMax tLeft  = IntersectAabb(node.leftBounds, s.ray);
			FloatMinMax tRight = IntersectAabb(node.rightBounds, s.ray);

			bool traverseLeft  = tLeft.min  <= tLeft.max  && tLeft.min  < s.t;
			bool traverseRight = tRight.min <= tRight.max && tRight.min < s.t;
			stats.BoxIntersection(2);

			int encodedLeft = EncodeLeaf(node.left, node.isLeftLeaf);
			int encodedRight = EncodeLeaf(node.right, node.isRightLeaf);
			s.nodeIndex = encodedLeft;

			if (traverseLeft != traverseRight)
			{
				// If only a single child was intersected we simply go to that one
				if (traverseRight)
					s.nodeIndex = encodedRight;
			}
			else
			{
				if (!traverseLeft)
				{
					// If neither child was intersected we pop the stack
					s.nodeIndex = traversalStack[s.stackIndex];
					s.stackIndex--;
					stats.Pop(1);
				}
				else
				{
					// If both children were intersected we push one onto the stack
					s.nodeIndex = encodedLeft;
					int postponeIndex = encodedRight;
					if (tRight.min < tLeft.min)
					{
						s.nodeIndex = encodedRight;
						postponeIndex = encodedLeft;
					}

					s.stackIndex++;
					traversalStack[s.stackIndex] = postponeIndex;
					stats.Push(1);
				}
			}
		}

		if (s.nodeIndex < 0)
		{
			s.nodeIndex = DecodeLeaf(s.nodeIndex);
			IndexedTriangle indices = _Triangles[s.nodeIndex];
			Triangle tri = MakeTriangle(_Vertices[indices.v1].xyz, _Vertices[indices.v2].xyz, _Vertices[indices.v3].xyz);

			// intersect triangle 
			float3 candidateCoordinates;
			float candidate_t = IntersectTriangle(tri, s.ray, candidateCoordinates);
			stats.TriangleIntersection(1);

			if (candidate_t > 0 && candidate_t < s.t)
			{
				s.t = candidate_t;
				s.nodeIndex = _entrypointSentinel;
			}
			else
			{
				s.nodeIndex = traversalStack[s.stackIndex];
				s.stackIndex--;
				stats.Pop(1);
			}
		}
	}
}

[numthreads(8, 8, 1)]
void BvhShadows(uint3 id : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID)
{
	uint2 size = (uint2) _Size;

	if (id.x >= size.x || id.y >= size.y)
		return;

	traversalStack[0] = _entrypointSentinel;
	TraversalState s = InitializeState(id);
	FakeStatistics stats;
	Traverse(s, stats);

	fixed4 col = _MainTex[id.xy];
	if (s.t < 100000)
		col *= 0.5;
	else
		col *= 1.0;
	_TargetTex[id.xy] = col;
}

groupshared uint _localClusterId;
groupshared uint _localClusterCount;

static const uint _clusterSize = 8;
static const uint _batchSize = 1;

[numthreads(8, 8, 1)]
void PersistentBvhShadows(uint3 did : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint2 size = (uint2) _Size;
	uint2 clusterCount = uint2(size.x / _clusterSize, size.y / _clusterSize);

	if (did.x == 0 && did.y == 0)
		//_TargetTex[id] = float4(1,0,1,1);
		_WorkCounter[0] = _ThreadGroupCount;

	traversalStack[0] = _entrypointSentinel;

	FakeStatistics stats;// = MakeStatistics();
	
	if (tid.x == 0 && tid.y == 0)
	{
		// _localPoolNextIndex = id.x + id.y * size.x;
		_localClusterId = gid.x * _batchSize;
		_localClusterCount = _batchSize;
	}

	while (true)
	{
		// GroupMemoryBarrier();

		if (_localClusterId >= (clusterCount.x * clusterCount.y))
			break;

		// GroupMemoryBarrier();
		uint2 localCluster;
		localCluster.x = _localClusterId % clusterCount.x;
		localCluster.y = _localClusterId / clusterCount.x;

		uint2 clusterCoords;
		clusterCoords.x = localCluster.x * _clusterSize;
		clusterCoords.y = localCluster.y * _clusterSize;

		uint2 id;
		id.x = clusterCoords.x + tid.x;
		id.y = clusterCoords.y + tid.y;

		if (id.x >= size.x || id.y >= size.y)
			continue;

		// _TargetTex[id] = float4((float2)id / size, 0, 1);
		// continue;

		TraversalState s = InitializeState(id);
		Traverse(s, stats);

		fixed4 col = _MainTex[id.xy];
		if (s.t < 100000)
			col *= 0.5;
		else
		    col *= 1.0;
		_TargetTex[id.xy] = col;// float4(localCluster.x/100.0, localCluster.y/100.0, 0, 1);

		if (tid.x == 0 && tid.y == 0)
		{
			if (_localClusterCount == 1)
			{
				InterlockedAdd(_WorkCounter[0], _batchSize, _localClusterId);
				_localClusterCount = _batchSize;
			}
			else
			{
				_localClusterCount -= 1;
				_localClusterId += 1;
			}
		}
	}
}