#pragma kernel BvhShadows
#pragma kernel PersistentBvhShadows
#pragma kernel CheckerboardBvhShadows
#pragma kernel LowResCheckerboardBvhShadows

#define STATS

#include "UnityCG.cginc"
#include "Math.cginc"
#include "Bvh.cginc"

Texture2D<float4> _MainTex;
Texture2D<float4> _NormalTexture;
UNITY_DECLARE_TEX2D_FLOAT(_DepthTexture);
RWTexture2D<float4> _TargetTex;
StructuredBuffer<Bvh::Node> _Nodes;
StructuredBuffer<IndexedTriangle> _Triangles;
StructuredBuffer<float4> _Vertices;
float3 _Light;
float2 _Size;
float4x4 _Projection;
float4x4 _InverseView;
uint _ThreadGroupCount;
RWStructuredBuffer<uint> _WorkCounter;

static const int _stackSize = 32;
static const int _entrypointSentinel = 2147483647;
static const int _rayBatchSize = 64;

interface IStatistics
{
	void BoxIntersection(int n);
	void TriangleIntersection(int n);
	void Push(int n);
	void Pop(int n);
};

class Statistics : IStatistics
{
	int boxIntersections;
	int triangleIntersections;
	int pushes;
	int pops;

	void BoxIntersection(int n) { boxIntersections += n; }
	void TriangleIntersection(int n) { triangleIntersections += n; }
	void Push(int n) { pushes += n; }
	void Pop(int n) { pops += n; }
};

Statistics MakeStatistics()
{
	Statistics stats;
	stats.boxIntersections = 0;
	stats.triangleIntersections = 0;
	stats.pushes = 0;
	stats.pops = 0;
	return stats;
}

class FakeStatistics : IStatistics
{
	void BoxIntersection(int n) {}
	void TriangleIntersection(int n) {}
	void Push(int n) {}
	void Pop(int n) {}
};

struct TraversalStats
{
	int boxIntersections;
	int triangleIntersections;
	int pushes;
	int pops;
};

struct TraversalState
{
	Ray ray;
	int nodeIndex;
	int stackIndex;
	float t;
};

TraversalState InitializeState(uint2 id)
{
	TraversalState state;

	float depth = LinearEyeDepth(_DepthTexture[id.xy].x);
	float2 p11_22 = float2(_Projection._11, _Projection._22);
	float2 uv = (((float2)id.xy + 0.5) / _Size);
    float3 vpos = float3((uv * 2 - 1) / p11_22, -1) * depth;
    float4 wpos = mul(_InverseView, float4(vpos, 1));
    float3 direction = normalize(-_Light);
    float3 normal = normalize(_NormalTexture[id.xy] * 2 - 1);

    state.ray = MakeRay(wpos + normal*1e-2, direction);
    // state.normal = normal;
    state.nodeIndex = 0;
    state.stackIndex = 0;
    state.t = 100000;

    return state;
}

void Traverse(inout TraversalState s, inout int traversalStack[_stackSize], inout FakeStatistics stats)
{
	while (s.nodeIndex != _entrypointSentinel)
	{
		while (s.nodeIndex >= 0 && s.nodeIndex != _entrypointSentinel)
		{
			Bvh::Node node = _Nodes[s.nodeIndex];

			FloatMinMax tLeft  = IntersectAabb(node.leftBounds, s.ray);
			FloatMinMax tRight = IntersectAabb(node.rightBounds, s.ray);

			bool traverseLeft  = tLeft.min  <= tLeft.max  && tLeft.min  < s.t;
			bool traverseRight = tRight.min <= tRight.max && tRight.min < s.t;
			stats.BoxIntersection(2);

			s.nodeIndex = node.left;

			if (traverseLeft != traverseRight)
			{
				// If only a single child was intersected we simply go to that one
				if (traverseRight)
					s.nodeIndex = node.right;
			}
			else
			{
				if (!traverseLeft)
				{
					// If neither child was intersected we pop the stack
					s.nodeIndex = traversalStack[s.stackIndex];
					s.stackIndex--;
					stats.Pop(1);
				}
				else
				{
					// If both children were intersected we push one onto the stack
					s.nodeIndex = node.left;
					int postponeIndex = node.right;
					if (tRight.min < tLeft.min)
					{
						s.nodeIndex = node.right;
						postponeIndex = node.left;
					}

					s.stackIndex++;
					traversalStack[s.stackIndex] = postponeIndex;
					stats.Push(1);
				}
			}
		}

		if (s.nodeIndex < 0)
		{
			s.nodeIndex = Bvh::DecodeLeaf(s.nodeIndex);
			IndexedTriangle indices = _Triangles[s.nodeIndex];
			Triangle tri = MakeTriangle(_Vertices[indices.v1].xyz, _Vertices[indices.v2].xyz, _Vertices[indices.v3].xyz);

			// intersect triangle 
			float3 candidateCoordinates;
			float candidate_t = IntersectTriangle(tri, s.ray, candidateCoordinates);
			stats.TriangleIntersection(1);

			if (candidate_t > 0 && candidate_t < s.t)
			{
				s.t = candidate_t;
				s.nodeIndex = _entrypointSentinel;
			}
			else
			{
				s.nodeIndex = traversalStack[s.stackIndex];
				s.stackIndex--;
				stats.Pop(1);
			}
		}
	}
}

[numthreads(8, 8, 1)]
void BvhShadows(uint3 id : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID)
{
	uint2 size = (uint2) _Size;

	if (id.x >= size.x || id.y >= size.y)
		return;
	
	int traversalStack[_stackSize] = {_entrypointSentinel, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	TraversalState s = InitializeState(id);
	FakeStatistics stats;
	Traverse(s, traversalStack, stats);

	fixed4 col = _MainTex[id.xy];
	if (s.t < 100000)
		col *= 0.5;
	else
		col *= 1.0;
	_TargetTex[id.xy] = col;
}

groupshared uint _localClusterId;
groupshared uint _localClusterCount;

static const uint2 _clusterSize = {4, 8};
static const uint _batchSize = 1;

[numthreads(_clusterSize.x, _clusterSize.y, 1)]
void PersistentBvhShadows(uint3 did : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint2 size = (uint2) _Size;
	uint2 clusterCount = size / _clusterSize;

	if (did.x == 0 && did.y == 0)
		_WorkCounter[0] = _ThreadGroupCount;

	int traversalStack[_stackSize] = {_entrypointSentinel, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	FakeStatistics stats;// = MakeStatistics();
	
	if (tid.x == 0 && tid.y == 0)
	{
		_localClusterId = gid.x * _batchSize;
		_localClusterCount = _batchSize;
	}

	while (true)
	{
		if (_localClusterId >= (clusterCount.x * clusterCount.y))
			break;

		uint2 id;
		id.x = (_localClusterId % clusterCount.x) * _clusterSize.x + tid.x;
		id.y = (_localClusterId / clusterCount.x) * _clusterSize.y + tid.y;

		if (id.x >= size.x || id.y >= size.y)
			continue;

		float3 normal = normalize(_NormalTexture[id] * 2 - 1);
		fixed4 col = _MainTex[id.xy];

		if (_DepthTexture[id.xy].x < 1e-3){}
		else if (dot(_Light, normal) > 0)
		{
			col *= 0.75;
		}
		else
		{
			TraversalState s = InitializeState(id);
			Traverse(s, traversalStack, stats);

			if (s.t < 100000)
				col *= 0.5;
			else
			    col *= 1.0;
		}

		_TargetTex[id.xy] = col;

		if (tid.x == 0 && tid.y == 0)
		{
			InterlockedAdd(_WorkCounter[0], 1, _localClusterId);
			// if (_localClusterCount == 1)
			// {
			// 	InterlockedAdd(_WorkCounter[0], _batchSize, _localClusterId);
			// 	_localClusterCount = _batchSize;
			// }
			// else
			// {
			// 	_localClusterCount -= 1;
			// 	_localClusterId += 1;
			// }
		}
	}
}

void ShadowPixel(uint2 coords, float shadow)
{
	_TargetTex[coords] = _MainTex[coords] * shadow; 
}

//groupshared float _shadow[_clusterSize.x][_clusterSize.y];

// float Contrib(int x, int y, inout int contrib)
// {
// 	if (x >= 0 && x < _clusterSize.x && y >= 0 && y < _clusterSize.y)
// 	{
// 		contrib += 1;
// 		return _shadow[x][y];
// 	}
// 	return 0;
// }

[numthreads(_clusterSize.x, _clusterSize.y, 1)]
void CheckerboardBvhShadows(uint3 did : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint2 size = (uint2) _Size;
	uint2 clusterCount = size / uint2(_clusterSize.x * 2, _clusterSize.y) + 1;

	if (did.x == 0 && did.y == 0)
		_WorkCounter[0] = _ThreadGroupCount;

	int traversalStack[_stackSize] = {_entrypointSentinel, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	FakeStatistics stats;// = MakeStatistics();
	
	if (tid.x == 0 && tid.y == 0)
	{
		_localClusterId = gid.x * _batchSize;
		_localClusterCount = _batchSize;
	}

	while (true)
	{
		if (_localClusterId >= (clusterCount.x * clusterCount.y))
			break;

		uint2 id;
		id.x = (_localClusterId % clusterCount.x) * _clusterSize.x * 2 + tid.x * 2 + tid.y%2;
		id.y = (_localClusterId / clusterCount.x) * _clusterSize.y + tid.y;

		if (id.x >= size.x || id.y >= size.y)
			continue;

		TraversalState s = InitializeState(id);
		Traverse(s, traversalStack, stats);

		float shadow = (s.t < 100000) ? 0.5 : 1.0;
		// GroupMemoryBarrier();

		ShadowPixel(id + uint2(0, 0), shadow);

		int offset = (tid.y%2)*2 - 1;
		// int contrib = 0;
		// float shadow = Contrib(tid.x, tid.y, contrib) + Contrib(tid.x+offset, tid.y, contrib) + Contrib(tid.x, tid.y+1, contrib) + Contrib(tid.x, tid.y-1, contrib);
		// ShadowPixel(id + int2(offset, 0), shadow);
		_TargetTex[uint2(id.x+offset, id.y)] = _MainTex[uint2(id.x+offset, id.y)];

		if (tid.x == 0 && tid.y == 0)
		{
			if (_localClusterCount == 1)
			{
				InterlockedAdd(_WorkCounter[0], _batchSize, _localClusterId);
				_localClusterCount = _batchSize;
			}
			else
			{
				_localClusterCount -= 1;
				_localClusterId += 1;
			}
		}
	}
}

[numthreads(_clusterSize.x, _clusterSize.y, 1)]
void LowResCheckerboardBvhShadows(uint3 did : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint2 size = (uint2) _Size;
	uint2 clusterCount = size / uint2(_clusterSize.x * 2, _clusterSize.y) + 1;

	if (did.x == 0 && did.y == 0)
		_WorkCounter[0] = _ThreadGroupCount;

	int traversalStack[_stackSize] = {_entrypointSentinel, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	FakeStatistics stats;// = MakeStatistics();
	
	if (tid.x == 0 && tid.y == 0)
	{
		_localClusterId = gid.x * _batchSize;
		_localClusterCount = _batchSize;
	}

	while (true)
	{
		if (_localClusterId >= (clusterCount.x * clusterCount.y))
			break;

		uint rowClusterId = _localClusterId % clusterCount.x;

		uint2 cid = uint2(
			rowClusterId * _clusterSize.x + tid.x,
			(_localClusterId / clusterCount.x) * _clusterSize.y + tid.y
		);

		uint2 id;
		id.x = rowClusterId * _clusterSize.x * 2 + tid.x * 2 + tid.y%2;
		id.y = cid.y;

		if (id.x >= size.x || id.y >= size.y)
			continue;

		TraversalState s = InitializeState(id);
		Traverse(s, traversalStack, stats);

		_TargetTex[cid] = float4(s.t < 100000 ? 0.0 : 1.0, 0, 0, 1);

		if (tid.x == 0 && tid.y == 0)
		{
			if (_localClusterCount == 1)
			{
				InterlockedAdd(_WorkCounter[0], _batchSize, _localClusterId);
				_localClusterCount = _batchSize;
			}
			else
			{
				_localClusterCount -= 1;
				_localClusterId += 1;
			}
		}
	}
}