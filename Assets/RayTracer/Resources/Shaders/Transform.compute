// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float3> g_VertexBuffer;
RWStructuredBuffer<float3> g_NormalBuffer;
StructuredBuffer<uint> g_ObjectIndexBuffer;
StructuredBuffer<float4x4> g_TransformBuffer;

// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
// https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/
uint expandBits(uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

// Calculates a 30-bit Morton code for the
// given 3D point located within the unit cube [0,1].
// https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/
uint morton3D(float x, float y, float z)
{
    x = min(max(x * 1024.0f, 0.0f), 1023.0f);
    y = min(max(y * 1024.0f, 0.0f), 1023.0f);
    z = min(max(z * 1024.0f, 0.0f), 1023.0f);
    unsigned int xx = expandBits((unsigned int) x);
    unsigned int yy = expandBits((unsigned int) y);
    unsigned int zz = expandBits((unsigned int) z);
    return xx * 4 + yy * 2 + zz;
}

[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint objectIndex = g_ObjectIndexBuffer.Load(id.x);
    float4x4 transform = g_TransformBuffer.Load(objectIndex);
    g_VertexBuffer[id.x] = mul(transform, float4(g_VertexBuffer[id.x], 1));
    g_NormalBuffer[id.x] = mul(transform, float4(g_VertexBuffer[id.x], 0));
}
