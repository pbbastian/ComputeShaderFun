#pragma kernel RadixHistogram

#define GROUP_SIZE 256

StructuredBuffer<int> g_KeyBuffer;
RWStructuredBuffer<int> g_HistogramBuffer;

int g_ItemCount;
int g_KeyShift;

interface INoise
{
	float Compute(float x);
};

class TestNoise : INoise
{
	float Compute(float x)
	{
		return x * 0.5;
	}
};

float f1(INoise noise)
{
	return noise.Compute(123);
}

float f2()
{
	TestNoise noise;
	f1(noise);
}

[numthreads(GROUP_SIZE, 1, 1)]
void RadixHistogram(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint) g_ItemCount)
        return;
    int key = g_KeyBuffer[id.x];
    int subKey = (key & (0xF << g_KeyShift)) >> g_KeyShift;
    for (int i = 0; i < 16; i++)
    	g_HistogramBuffer[g_ItemCount * i + id.x] = i == subKey ? 1 : 0;
}