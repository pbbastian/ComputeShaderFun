#pragma kernel BvhRayTracer

#include "Math.cginc"
#include "Bvh.cginc"

float3 _light;
float4x4 _inverseCameraMatrix;
float3 _origin;
StructuredBuffer<Bvh::Node> _nodes;
StructuredBuffer<IndexedTriangle> _triangles;
StructuredBuffer<float4> _vertices;
RWTexture2D<float4> _result;

#define STACK_SIZE 64

static const int _entrypointSentinel = 2147483647;
static const bool _anyHit = true;

[numthreads(8, 8, 1)]
void BvhRayTracer(uint3 id : SV_DispatchThreadID)
{
	Ray r = CameraRay(_inverseCameraMatrix, _origin, id.xy);
	int traversalStack[STACK_SIZE];
	traversalStack[0] = _entrypointSentinel;
	int nodeIndex = 0;
	int stackIndex = 0;

	// float3 idir = 1.0 / r.direction;
	float3 coordinates = float3(1, 0, 1);
	float t = 100000;

	int boxIntersections = 0;
	int pushes = 0;
	int pops = 0;

	while (nodeIndex != _entrypointSentinel)
	{
		while (nodeIndex >= 0 && nodeIndex != _entrypointSentinel)
		{
			Bvh::Node node = _nodes[nodeIndex];
			FloatMinMax tLeft = IntersectAabb(node.leftBounds, r);
			FloatMinMax tRight = IntersectAabb(node.rightBounds, r);
			bool traverseLeft = tLeft.min <= tLeft.max    && tLeft.min  < t;
			bool traverseRight = tRight.min <= tRight.max && tRight.min  < t;

			nodeIndex = node.left;

			if (traverseLeft != traverseRight)
			{
				boxIntersections++;
				// If only a single child was intersected we simply go to that one
				if (traverseRight)
					nodeIndex = node.right;
			}
			else
			{
				if (!traverseLeft)
				{
					// If neither child was intersected we pop the stack
					nodeIndex = traversalStack[stackIndex];
					stackIndex--;
					pops++;
				}
				else
				{
					boxIntersections += 2;
					// If both children were intersected we push one onto the stack
					nodeIndex = node.left;
					int postponeIndex = node.right;
					if (tRight.min < tLeft.min)
					{
						nodeIndex = node.right;
						postponeIndex = node.left;
					}

					stackIndex++;
					traversalStack[stackIndex] = postponeIndex;
					pushes++;
				}
			}
		}

		if (nodeIndex < 0)
		{
			nodeIndex = Bvh::DecodeLeaf(nodeIndex);
			IndexedTriangle indices = _triangles[nodeIndex];
			Triangle tri = MakeTriangle(_vertices[indices.v1].xyz, _vertices[indices.v2].xyz, _vertices[indices.v3].xyz);

			// intersect triangle
			float3 candidateCoordinates;
			float candidate_t = IntersectTriangle(tri, r, candidateCoordinates);
			if (candidate_t > 0.01 && candidate_t < t)
			{
				coordinates = candidateCoordinates;
				t = candidate_t;
				nodeIndex = _entrypointSentinel;

				if (_anyHit)
					break;
			}
			
			nodeIndex = traversalStack[stackIndex];
			stackIndex--;
		}
	}

	_result[id.xy] = float4(HeatMap(100, boxIntersections), 1);
	// _result[id.xy] = float4(coordinates, 1);
}
