#pragma kernel RadixCount

#define GROUP_SIZE 256

StructuredBuffer<int> g_KeyBuffer;
RWStructuredBuffer<int> g_CountBuffer;

int g_SectionSize;
int g_KeyShift;
int g_ItemCount;

groupshared int counts[GROUP_SIZE][16];

[numthreads(GROUP_SIZE, 1, 1)]
void RadixCount(uint3 groupThreadId : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
    for (int i = 0; i < 16; i++)
        counts[groupThreadId.x][i] = 0;
    GroupMemoryBarrier();
    int offset = dispatchThreadId.x * g_SectionSize;
    for (int i = offset; i < min(offset + g_SectionSize, g_ItemCount); i++)
    {
        int key = g_KeyBuffer[i];
        int value = (key >> g_KeyShift) & 0xF;
        counts[groupThreadId.x][value]++;
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    // TODO: sum up group counts gooder
    
    if (groupThreadId.x < 16)
    {
        int sum = 0;
        // todo: parallel reduction
        for (int i = 0; i < GROUP_SIZE; i++)
            sum += counts[i][groupThreadId.x];
        InterlockedAdd(g_CountBuffer[groupThreadId.x], sum);
    }
}