#pragma kernel CSMain_Warp64 WARP_SIZE=64
#pragma kernel CSMain_Warp32 WARP_SIZE=32
#pragma kernel CSMain_Warp16

#if WARP_SIZE == 64
#define GROUP_SIZE 1024
#define WARP_SHIFT 6
#elif WARP_SIZE == 32
#define GROUP_SIZE 512
#define WARP_SHIFT 5
#else
#define WARP_SIZE 16
#define GROUP_SIZE 256
#define WARP_SHIFT 4
#endif


RWStructuredBuffer<int> g_Buffer;
RWStructuredBuffer<int> g_GroupResultsBuffer;

int g_Offset;
int g_Limit;

groupshared int temp[GROUP_SIZE];

int ScanWarp(uint index, uint lane)
{
    if (lane >= 1)
        temp[index] = temp[index - 1] + temp[index];
    if (lane >= 2)
        temp[index] = temp[index - 2] + temp[index];
    if (lane >= 4)
        temp[index] = temp[index - 4] + temp[index];
    if (lane >= 8)
        temp[index] = temp[index - 8] + temp[index];
#if WARP_SIZE >= 32
    if (lane >= 16)
        temp[index] = temp[index - 16] + temp[index];
#endif
#if WARP_SIZE >= 64
    if (lane >= 32)
        temp[index] = temp[index - 32] + temp[index];
#endif
    return lane > 0 ? temp[index - 1] : 0;
}

int ScanWarpInclusive(uint index, uint lane)
{
    if (lane >= 1)
        temp[index] = temp[index - 1] + temp[index];
    if (lane >= 2)
        temp[index] = temp[index - 2] + temp[index];
    if (lane >= 4)
        temp[index] = temp[index - 4] + temp[index];
    if (lane >= 8)
        temp[index] = temp[index - 8] + temp[index];
#if WARP_SIZE >= 32
    if (lane >= 16)
        temp[index] = temp[index - 16] + temp[index];
#endif
#if WARP_SIZE >= 64
    if (lane >= 32)
        temp[index] = temp[index - 32] + temp[index];
#endif
    return temp[index];
}

int ScanGroup(uint index)
{
    uint lane = index & (WARP_SIZE - 1); // index of thread in warp (0..31)
    uint warpId = index >> WARP_SHIFT;

    uint val = ScanWarp(index, lane);
    GroupMemoryBarrierWithGroupSync();

    if (lane == (WARP_SIZE - 1))
        temp[warpId] = temp[index];
    GroupMemoryBarrierWithGroupSync();

    if (warpId == 0)
        ScanWarpInclusive(index, lane);
    GroupMemoryBarrierWithGroupSync();

    if (warpId > 0)
        val = val + temp[warpId - 1];
    GroupMemoryBarrierWithGroupSync();

    temp[index] = val;
    GroupMemoryBarrierWithGroupSync();

    return val;
}

void CSMain(uint3 groupThreadId, uint3 dispatchThreadId, uint3 groupId)
{
    int dispatchId = (int) dispatchThreadId.x;
    uint groupIndex = groupThreadId.x;
    uint dataIndex = g_Offset + dispatchId;
    int input = dispatchId < g_Limit ? g_Buffer[dataIndex] : 0;
    temp[groupIndex] = input;
    GroupMemoryBarrierWithGroupSync();
    int result = ScanGroup(groupIndex);
    // if (dispatchThreadId.x < g_Limit)
    //     g_Buffer[dataIndex] = result;
    // if (groupIndex == GROUP_SIZE - 1)
    //     g_GroupResultsBuffer[groupId.x] = input + result;

    if (dispatchId < g_Limit)
        g_Buffer[dataIndex] = result; // groupIndex == GROUP_SIZE - 1 ? groupId.x : -1;
    if (groupIndex == GROUP_SIZE - 1)
        g_GroupResultsBuffer[groupId.x] = input + result;
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain_Warp64(uint3 groupThreadId : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
    CSMain(groupThreadId, dispatchThreadId, groupId);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain_Warp32(uint3 groupThreadId : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
    CSMain(groupThreadId, dispatchThreadId, groupId);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain_Warp16(uint3 groupThreadId : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
    CSMain(groupThreadId, dispatchThreadId, groupId);
}
