#pragma kernel CSMain_Warp64 WARP_64
#pragma kernel CSMain_Warp32 WARP_32
#pragma kernel CSMain_Warp16

#ifdef WARP_64
#define WARP_SIZE 64
#define GROUP_SIZE 1024
#define WARP_SHIFT 6
#elif WARP_32
#define WARP_SIZE 32
#define GROUP_SIZE 1024
#define WARP_SHIFT 5
#else
#define WARP_SIZE 16
#define GROUP_SIZE 512
#define WARP_SHIFT 4
#endif


StructuredBuffer<int> g_InputBuffer;
RWStructuredBuffer<int> g_OutputBuffer;

groupshared int temp[GROUP_SIZE];

int ScanWarp(uint index, uint lane)
{
    if (lane >= 1)
        temp[index] = temp[index - 1] + temp[index];
    if (lane >= 2)
        temp[index] = temp[index - 2] + temp[index];
    if (lane >= 4)
        temp[index] = temp[index - 4] + temp[index];
    if (lane >= 8)
        temp[index] = temp[index - 8] + temp[index];
#if WARP_SIZE >= 32
    if (lane >= 16)
        temp[index] = temp[index - 16] + temp[index];
#endif
#if WARP_SIZE >= 64
    if (lane >= 32)
        temp[index] = temp[index - 32] + temp[index];
#endif

    return lane > 0 ? temp[index - 1] : 0;
}

int ScanGroup(uint index)
{
    uint lane = index & (WARP_SIZE - 1); // index of thread in warp (0..31)
    uint warpId = index >> WARP_SHIFT;

    uint val = ScanWarp(index, lane);
    GroupMemoryBarrierWithGroupSync();

    if (lane == (WARP_SIZE - 1))
        temp[warpId] = temp[index];
    GroupMemoryBarrierWithGroupSync();

    if (warpId == 0)
        ScanWarp(index, lane);
    GroupMemoryBarrierWithGroupSync();

    if (warpId > 0)
        val = val + temp[warpId - 1];
    GroupMemoryBarrierWithGroupSync();

    temp[index] = val;
    GroupMemoryBarrierWithGroupSync();

    return val;
}

void CSMain(uint3 id)
{
    uint index = id.x;
    temp[index] = g_InputBuffer.Load(index);
    g_OutputBuffer[index] = ScanGroup(index);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain_Warp64(uint3 id : SV_DispatchThreadID)
{
    CSMain(id);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain_Warp32(uint3 id : SV_DispatchThreadID)
{
    CSMain(id);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain_Warp16(uint3 id : SV_DispatchThreadID)
{
    CSMain(id);
}
