#define STATS

#include "UnityCG.cginc"
#include "Math.cginc"
#include "Bvh.cginc"

Texture2D<float4> _NormalTexture;
UNITY_DECLARE_TEX2D_FLOAT(_DepthTexture);
RWTexture2D<float4> _TargetTex;
StructuredBuffer<Bvh::Node> _Nodes;
StructuredBuffer<IndexedTriangle> _Triangles;
StructuredBuffer<float4> _Vertices;
Texture2D<float4> _ShadowmapTexture;
SamplerState sampler_ShadowmapTexture;
float4 _ShadowmapTexture_TexelSize;
float3 _Light;
float2 _Size;
float4x4 _Projection;
float4x4 _InverseView;
float4x4 _WorldToLight;
uint _ThreadGroupCount;
RWStructuredBuffer<uint> _WorkCounter;

static const int _stackSize = 12;
static const int _entrypointSentinel = 2147483647;
static const uint2 _clusterSize = {8, 8};
static const uint _clusterLength = _clusterSize.x * _clusterSize.y;
groupshared int _traversalStack[_stackSize * _clusterLength];

int InterleavedIndex(int threadId, int index)
{
    return index * _clusterLength + threadId;
}

bool Traverse(int threadId, Ray ray, float tmax, float tmin)
{
    int nodeIndex = 0;
    int stackIndex = 0;
    float t = tmax;

	while (nodeIndex != _entrypointSentinel)
	{
		while (nodeIndex >= 0 && nodeIndex != _entrypointSentinel)
		{
			Bvh::Node node = _Nodes[nodeIndex];

			FloatMinMax tLeft  = IntersectAabb(node.leftBounds, ray);
			FloatMinMax tRight = IntersectAabb(node.rightBounds, ray);

			bool traverseLeft  = tLeft.min  <= tLeft.max  && tLeft.min  < t && tLeft.max > tmin;
			bool traverseRight = tRight.min <= tRight.max && tRight.min < t && tRight.max > tmin;
			// stats.BoxIntersection(2);

			nodeIndex = node.left;

			if (traverseLeft != traverseRight)
			{
				// If only a single child was intersected we simply go to that one
				if (traverseRight)
					nodeIndex = node.right;
			}
			else
			{
				if (!traverseLeft)
				{
					// If neither child was intersected we pop the stack
					nodeIndex = _traversalStack[InterleavedIndex(threadId, stackIndex)];
					stackIndex--;
					// stats.Pop(1);
				}
				else
				{
					// If both children were intersected we push one onto the stack
					nodeIndex = node.left;
					int postponeIndex = node.right;
					if (tRight.min < tLeft.min)
					{
						nodeIndex = node.right;
						postponeIndex = node.left;
					}

					stackIndex++;
					_traversalStack[InterleavedIndex(threadId, stackIndex)] = postponeIndex;
					// stats.Push(1);
				}
			}
		}

		if (nodeIndex < 0)
		{
			nodeIndex = Bvh::DecodeLeaf(nodeIndex);
			IndexedTriangle indices = _Triangles[nodeIndex];
			Triangle tri = MakeTriangle(_Vertices[indices.v1].xyz, _Vertices[indices.v2].xyz, _Vertices[indices.v3].xyz);

			// intersect triangle
			float3 candidateCoordinates;
			float candidate_t = IntersectTriangle(tri, ray, candidateCoordinates);
			// stats.TriangleIntersection(1);

			if (candidate_t > tmin && candidate_t < t)
			{
                return true;
                // t = candidate_t;
			}

			nodeIndex = _traversalStack[InterleavedIndex(threadId, stackIndex)];
			stackIndex--;
			// stats.Pop(1);
		}
	}

    return false;
}

groupshared uint _localClusterId;
groupshared uint _localClusterCount;

static const uint _batchSize = 1;

float3 WorldToLight(float3 wsPosition)
{
    float3 lsPosition = mul(_WorldToLight, float4(wsPosition, 1.0)).xyz;
    lsPosition.z = -lsPosition.z;
    float distanceToLight = length(lsPosition);
    lsPosition = lsPosition / distanceToLight;

    lsPosition.z = lsPosition.z + 1;
    lsPosition.x = lsPosition.x / (lsPosition.z);
    lsPosition.y = lsPosition.y / (lsPosition.z);

    float near = 0.2;
    float far = 20;

    lsPosition.z = (distanceToLight - near) / (far - near);

#if defined(UNITY_REVERSED_Z)
    lsPosition.z = min(1 - lsPosition.z, UNITY_NEAR_CLIP_VALUE);
#else
    lsPosition.z = max(lsPosition.z, UNITY_NEAR_CLIP_VALUE);
#endif

    return lsPosition;
}

groupshared int temp[_clusterLength];

void ShadowsKernel(uint3 did, uint3 tid, uint3 gid)
{
	uint2 size = (uint2) _Size;
	uint2 clusterCount = (size+1) / _clusterSize;

	if (did.x == 0 && did.y == 0)
		_WorkCounter[0] = _ThreadGroupCount;

	if (tid.x == 0 && tid.y == 0)
	{
		_localClusterId = gid.x * _batchSize;
		_localClusterCount = _batchSize;
	}

    int flatThreadId = tid.x + tid.y * _clusterSize.x;
    _traversalStack[InterleavedIndex(flatThreadId, 0)] = _entrypointSentinel;

	while (true)
	{
		// No more pixels left, end loop
		if (_localClusterId >= (clusterCount.x * clusterCount.y))
			break;

		uint2 id;
		id.x = (_localClusterId % clusterCount.x) * _clusterSize.x + tid.x;
		id.y = (_localClusterId / clusterCount.x) * _clusterSize.y + tid.y;

		if (id.x >= size.x || id.y >= size.y)
			continue;

        float2 uv = (((float2)id + 0.5) / _Size);
        float depth = LinearEyeDepth(_DepthTexture[id].x);
        float3 vsPosition = float3((uv * 2 - 1) / float2(_Projection._11, _Projection._22), -1) * depth;
        float3 wsPosition = mul(_InverseView, float4(vsPosition, 1)).xyz;
        float3 lsPosition = WorldToLight(wsPosition);
        float3 direction = normalize(wsPosition - _Light);
        float3 normal = normalize(_NormalTexture[id].rgb * 2 - 1);

        Ray ray = MakeRay(_Light, direction);
        float tmax = (wsPosition - ray.origin) / ray.direction - 1e-1;
        float tmin = 1e-1;
        float t = tmax;

        float shadowmapVisibility;

        #if _PIXEL_CULLING
            float4 occluderDepths = _ShadowmapTexture.Gather(sampler_ShadowmapTexture, float2(lsPosition.x * 0.5 + 0.5,  lsPosition.y * 0.5 + 0.5));
            float4 visibilitySamples = saturate(sign(lsPosition.zzzz - occluderDepths + 1e-2));
            shadowmapVisibility = (visibilitySamples.x + visibilitySamples.y + visibilitySamples.z + visibilitySamples.w) * 0.25;

            float near = 0.2;
            float far = 20;
            float4 tsamples = ((1-occluderDepths) * (far - near) + near);
        #else
            shadowmapVisibility = 0.5;
        #endif

        float visibility;
        if (shadowmapVisibility == 0 || depth > 20 - 1e-3 || dot(normal, direction) > 0)
        {
            visibility = 0;
        }
        else if (shadowmapVisibility == 1)
        {
            visibility = 1;
        }
        else
        {
            #if _SEGMENT_CULLING
                float4 tmax_candidates = (tsamples + 0.2) * (1 - visibilitySamples);
                tmax = min(tmax, max(tmax_candidates.x, max(tmax_candidates.y, max(tmax_candidates.z, tmax_candidates.w))));
                float4 tmin_candidates = (tsamples - 0.2) * (1 - visibilitySamples) + 10000 * visibilitySamples;
                tmin = min(tmin_candidates.x, min(tmin_candidates.y, min(tmin_candidates.z, tmin_candidates.w)));
            #endif
            visibility = Traverse(flatThreadId, ray, tmax, tmin) ? 0.0 : 1.0;

        }

		_TargetTex[id] = visibility;


		if (tid.x == 0 && tid.y == 0)
		{
			InterlockedAdd(_WorkCounter[0], 1, _localClusterId);
		}
	}
}

#define VARIANT(NAME) [numthreads(_clusterSize.x, _clusterSize.y, 1)] void NAME (uint3 did : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) { ShadowsKernel(did, tid, gid); }

#pragma kernel Shadows
VARIANT(Shadows)

#pragma kernel Shadows_PixelCulling _PIXEL_CULLING
VARIANT(Shadows_PixelCulling)

#pragma kernel Shadows_PixelCulling_SegmentCulling _PIXEL_CULLING _SEGMENT_CULLING
VARIANT(Shadows_PixelCulling_SegmentCulling)

// old junk

// interface IStatistics
// {
//     void BoxIntersection(int n);
//     void TriangleIntersection(int n);
//     void Push(int n);
//     void Pop(int n);
// };

// class Statistics : IStatistics
// {
//     int boxIntersections;
//     int triangleIntersections;
//     int pushes;
//     int pops;

//     void BoxIntersection(int n) { boxIntersections += n; }
//     void TriangleIntersection(int n) { triangleIntersections += n; }
//     void Push(int n) { pushes += n; }
//     void Pop(int n) { pops += n; }
// };

// Statistics MakeStatistics()
// {
//     Statistics stats;
//     stats.boxIntersections = 0;
//     stats.triangleIntersections = 0;
//     stats.pushes = 0;
//     stats.pops = 0;
//     return stats;
// }

// class FakeStatistics : IStatistics
// {
//     void BoxIntersection(int n) {}
//     void TriangleIntersection(int n) {}
//     void Push(int n) {}
//     void Pop(int n) {}
// };

// struct TraversalStats
// {
//     int boxIntersections;
//     int triangleIntersections;
//     int pushes;
//     int pops;
// };
